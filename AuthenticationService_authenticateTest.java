// Generated by Qodo Gen

import com.clinic.clinic_admin_backend.services.AuthenticationService;

import org.junit.Test;

import static org.junit.Assert.*;

public class AuthenticateTest {


    // Ensure that the authentication process does not alter the user's data.
    @Test
    public void test_authentication_process_does_not_alter_user_data() {
        UserRepository userRepository = Mockito.mock(UserRepository.class);
        AuthenticationManager authenticationManager = Mockito.mock(AuthenticationManager.class);
        PasswordEncoder passwordEncoder = Mockito.mock(PasswordEncoder.class);
        AuthenticationService authenticationService = new AuthenticationService(userRepository, authenticationManager, passwordEncoder);

        LoginUserDTO loginUserDto = new LoginUserDTO();
        loginUserDto.setEmail("test@example.com");
        loginUserDto.setPassword("password");

        User user = new User();
        user.setEmail("test@example.com");
        user.setEnabled(true);

        Mockito.when(userRepository.findByEmail("test@example.com")).thenReturn(Optional.of(user));
        Mockito.doNothing().when(authenticationManager).authenticate(Mockito.any(UsernamePasswordAuthenticationToken.class));

        User authenticatedUser = authenticationService.authenticate(loginUserDto);

        Assertions.assertNotNull(authenticatedUser);
        Assertions.assertEquals("test@example.com", authenticatedUser.getEmail());
    }
}